version: '3.8'

services:
  clouptimizer:
    build:
      context: .
      dockerfile: Dockerfile
    image: clouptimizer:latest
    container_name: clouptimizer
    restart: unless-stopped
    ports:
      - "8000:8000"  # API
      - "9090:9090"  # Metrics
      - "8080:8080"  # Health checks
    environment:
      - CLOUPTIMIZER_ENV=production
      - CLOUPTIMIZER_DEBUG=false
      - CLOUPTIMIZER_LOG_LEVEL=INFO
      - CLOUPTIMIZER_MAX_WORKERS=10
      - CLOUPTIMIZER_BATCH_SIZE=100
      # AWS Configuration (use environment variables or secrets)
      - AWS_PROFILE=${AWS_PROFILE:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      # Azure Configuration
      - AZURE_TENANT_ID=${AZURE_TENANT_ID:-}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID:-}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET:-}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID:-}
      # GCP Configuration
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/gcp.json
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-}
      # Redis Cache Configuration
      - REDIS_URL=redis://redis:6379/0
      # PostgreSQL Configuration
      - DATABASE_URL=postgresql://clouptimizer:${DB_PASSWORD:-changeme}@postgres:5432/clouptimizer
    volumes:
      - ./config:/app/config:ro
      - ./credentials:/app/credentials:ro
      - logs:/app/logs
      - data:/app/data
      - reports:/app/reports
    depends_on:
      - redis
      - postgres
    networks:
      - clouptimizer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: clouptimizer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - clouptimizer-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: clouptimizer-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=clouptimizer
      - POSTGRES_USER=clouptimizer
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - clouptimizer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clouptimizer -d clouptimizer"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: clouptimizer-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - clouptimizer-network
    depends_on:
      - clouptimizer

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: clouptimizer-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - clouptimizer-network
    depends_on:
      - prometheus

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: clouptimizer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - clouptimizer-network
    depends_on:
      - clouptimizer
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  clouptimizer-network:
    driver: bridge

volumes:
  logs:
    driver: local
  data:
    driver: local
  reports:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-cache:
    driver: local